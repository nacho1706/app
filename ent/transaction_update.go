// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"test-go2/ent/category"
	"test-go2/ent/predicate"
	"test-go2/ent/transaction"
	"test-go2/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (_u *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUserID sets the "user_id" field.
func (_u *TransactionUpdate) SetUserID(v int) *TransactionUpdate {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableUserID(v *int) *TransactionUpdate {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *TransactionUpdate) ClearUserID() *TransactionUpdate {
	_u.mutation.ClearUserID()
	return _u
}

// SetType sets the "type" field.
func (_u *TransactionUpdate) SetType(v transaction.Type) *TransactionUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableType(v *transaction.Type) *TransactionUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetAmount sets the "amount" field.
func (_u *TransactionUpdate) SetAmount(v float64) *TransactionUpdate {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableAmount(v *float64) *TransactionUpdate {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *TransactionUpdate) AddAmount(v float64) *TransactionUpdate {
	_u.mutation.AddAmount(v)
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *TransactionUpdate) SetCurrency(v string) *TransactionUpdate {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableCurrency(v *string) *TransactionUpdate {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// SetConversionRate sets the "conversion_rate" field.
func (_u *TransactionUpdate) SetConversionRate(v float64) *TransactionUpdate {
	_u.mutation.ResetConversionRate()
	_u.mutation.SetConversionRate(v)
	return _u
}

// SetNillableConversionRate sets the "conversion_rate" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableConversionRate(v *float64) *TransactionUpdate {
	if v != nil {
		_u.SetConversionRate(*v)
	}
	return _u
}

// AddConversionRate adds value to the "conversion_rate" field.
func (_u *TransactionUpdate) AddConversionRate(v float64) *TransactionUpdate {
	_u.mutation.AddConversionRate(v)
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *TransactionUpdate) SetCategoryID(v int) *TransactionUpdate {
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableCategoryID(v *int) *TransactionUpdate {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// ClearCategoryID clears the value of the "category_id" field.
func (_u *TransactionUpdate) ClearCategoryID() *TransactionUpdate {
	_u.mutation.ClearCategoryID()
	return _u
}

// SetDescription sets the "description" field.
func (_u *TransactionUpdate) SetDescription(v string) *TransactionUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableDescription(v *string) *TransactionUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TransactionUpdate) ClearDescription() *TransactionUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetTxDate sets the "tx_date" field.
func (_u *TransactionUpdate) SetTxDate(v time.Time) *TransactionUpdate {
	_u.mutation.SetTxDate(v)
	return _u
}

// SetNillableTxDate sets the "tx_date" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableTxDate(v *time.Time) *TransactionUpdate {
	if v != nil {
		_u.SetTxDate(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *TransactionUpdate) SetCreatedAt(v time.Time) *TransactionUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableCreatedAt(v *time.Time) *TransactionUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *TransactionUpdate) ClearCreatedAt() *TransactionUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TransactionUpdate) SetUpdatedAt(v time.Time) *TransactionUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *TransactionUpdate) SetNillableUpdatedAt(v *time.Time) *TransactionUpdate {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TransactionUpdate) ClearUpdatedAt() *TransactionUpdate {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *TransactionUpdate) SetUser(v *User) *TransactionUpdate {
	return _u.SetUserID(v.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (_u *TransactionUpdate) SetCategory(v *Category) *TransactionUpdate {
	return _u.SetCategoryID(v.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (_u *TransactionUpdate) Mutation() *TransactionMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *TransactionUpdate) ClearUser() *TransactionUpdate {
	_u.mutation.ClearUser()
	return _u
}

// ClearCategory clears the "category" edge to the Category entity.
func (_u *TransactionUpdate) ClearCategory() *TransactionUpdate {
	_u.mutation.ClearCategory()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TransactionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TransactionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TransactionUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := transaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Transaction.type": %w`, err)}
		}
	}
	return nil
}

func (_u *TransactionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(transaction.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(transaction.FieldCurrency, field.TypeString, value)
	}
	if value, ok := _u.mutation.ConversionRate(); ok {
		_spec.SetField(transaction.FieldConversionRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedConversionRate(); ok {
		_spec.AddField(transaction.FieldConversionRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(transaction.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(transaction.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.TxDate(); ok {
		_spec.SetField(transaction.FieldTxDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(transaction.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(transaction.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.UserTable,
			Columns: []string{transaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.UserTable,
			Columns: []string{transaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.CategoryTable,
			Columns: []string{transaction.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.CategoryTable,
			Columns: []string{transaction.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetUserID sets the "user_id" field.
func (_u *TransactionUpdateOne) SetUserID(v int) *TransactionUpdateOne {
	_u.mutation.SetUserID(v)
	return _u
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableUserID(v *int) *TransactionUpdateOne {
	if v != nil {
		_u.SetUserID(*v)
	}
	return _u
}

// ClearUserID clears the value of the "user_id" field.
func (_u *TransactionUpdateOne) ClearUserID() *TransactionUpdateOne {
	_u.mutation.ClearUserID()
	return _u
}

// SetType sets the "type" field.
func (_u *TransactionUpdateOne) SetType(v transaction.Type) *TransactionUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableType(v *transaction.Type) *TransactionUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetAmount sets the "amount" field.
func (_u *TransactionUpdateOne) SetAmount(v float64) *TransactionUpdateOne {
	_u.mutation.ResetAmount()
	_u.mutation.SetAmount(v)
	return _u
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableAmount(v *float64) *TransactionUpdateOne {
	if v != nil {
		_u.SetAmount(*v)
	}
	return _u
}

// AddAmount adds value to the "amount" field.
func (_u *TransactionUpdateOne) AddAmount(v float64) *TransactionUpdateOne {
	_u.mutation.AddAmount(v)
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *TransactionUpdateOne) SetCurrency(v string) *TransactionUpdateOne {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableCurrency(v *string) *TransactionUpdateOne {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// SetConversionRate sets the "conversion_rate" field.
func (_u *TransactionUpdateOne) SetConversionRate(v float64) *TransactionUpdateOne {
	_u.mutation.ResetConversionRate()
	_u.mutation.SetConversionRate(v)
	return _u
}

// SetNillableConversionRate sets the "conversion_rate" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableConversionRate(v *float64) *TransactionUpdateOne {
	if v != nil {
		_u.SetConversionRate(*v)
	}
	return _u
}

// AddConversionRate adds value to the "conversion_rate" field.
func (_u *TransactionUpdateOne) AddConversionRate(v float64) *TransactionUpdateOne {
	_u.mutation.AddConversionRate(v)
	return _u
}

// SetCategoryID sets the "category_id" field.
func (_u *TransactionUpdateOne) SetCategoryID(v int) *TransactionUpdateOne {
	_u.mutation.SetCategoryID(v)
	return _u
}

// SetNillableCategoryID sets the "category_id" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableCategoryID(v *int) *TransactionUpdateOne {
	if v != nil {
		_u.SetCategoryID(*v)
	}
	return _u
}

// ClearCategoryID clears the value of the "category_id" field.
func (_u *TransactionUpdateOne) ClearCategoryID() *TransactionUpdateOne {
	_u.mutation.ClearCategoryID()
	return _u
}

// SetDescription sets the "description" field.
func (_u *TransactionUpdateOne) SetDescription(v string) *TransactionUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableDescription(v *string) *TransactionUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TransactionUpdateOne) ClearDescription() *TransactionUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetTxDate sets the "tx_date" field.
func (_u *TransactionUpdateOne) SetTxDate(v time.Time) *TransactionUpdateOne {
	_u.mutation.SetTxDate(v)
	return _u
}

// SetNillableTxDate sets the "tx_date" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableTxDate(v *time.Time) *TransactionUpdateOne {
	if v != nil {
		_u.SetTxDate(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *TransactionUpdateOne) SetCreatedAt(v time.Time) *TransactionUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableCreatedAt(v *time.Time) *TransactionUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *TransactionUpdateOne) ClearCreatedAt() *TransactionUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TransactionUpdateOne) SetUpdatedAt(v time.Time) *TransactionUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_u *TransactionUpdateOne) SetNillableUpdatedAt(v *time.Time) *TransactionUpdateOne {
	if v != nil {
		_u.SetUpdatedAt(*v)
	}
	return _u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (_u *TransactionUpdateOne) ClearUpdatedAt() *TransactionUpdateOne {
	_u.mutation.ClearUpdatedAt()
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *TransactionUpdateOne) SetUser(v *User) *TransactionUpdateOne {
	return _u.SetUserID(v.ID)
}

// SetCategory sets the "category" edge to the Category entity.
func (_u *TransactionUpdateOne) SetCategory(v *Category) *TransactionUpdateOne {
	return _u.SetCategoryID(v.ID)
}

// Mutation returns the TransactionMutation object of the builder.
func (_u *TransactionUpdateOne) Mutation() *TransactionMutation {
	return _u.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (_u *TransactionUpdateOne) ClearUser() *TransactionUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// ClearCategory clears the "category" edge to the Category entity.
func (_u *TransactionUpdateOne) ClearCategory() *TransactionUpdateOne {
	_u.mutation.ClearCategory()
	return _u
}

// Where appends a list predicates to the TransactionUpdate builder.
func (_u *TransactionUpdateOne) Where(ps ...predicate.Transaction) *TransactionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Transaction entity.
func (_u *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TransactionUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := transaction.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Transaction.type": %w`, err)}
		}
	}
	return nil
}

func (_u *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(transaction.Table, transaction.Columns, sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(transaction.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Amount(); ok {
		_spec.SetField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedAmount(); ok {
		_spec.AddField(transaction.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(transaction.FieldCurrency, field.TypeString, value)
	}
	if value, ok := _u.mutation.ConversionRate(); ok {
		_spec.SetField(transaction.FieldConversionRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedConversionRate(); ok {
		_spec.AddField(transaction.FieldConversionRate, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(transaction.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(transaction.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.TxDate(); ok {
		_spec.SetField(transaction.FieldTxDate, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(transaction.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(transaction.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(transaction.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.UpdatedAtCleared() {
		_spec.ClearField(transaction.FieldUpdatedAt, field.TypeTime)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.UserTable,
			Columns: []string{transaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.UserTable,
			Columns: []string{transaction.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.CategoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.CategoryTable,
			Columns: []string{transaction.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.CategoryTable,
			Columns: []string{transaction.CategoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
