// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"test-go2/ent/category"
	"test-go2/ent/transaction"
	"test-go2/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCreate is the builder for creating a User entity.
type UserCreate struct {
	config
	mutation *UserMutation
	hooks    []Hook
}

// SetAccountID sets the "account_id" field.
func (_c *UserCreate) SetAccountID(v int) *UserCreate {
	_c.mutation.SetAccountID(v)
	return _c
}

// SetFirstName sets the "first_name" field.
func (_c *UserCreate) SetFirstName(v string) *UserCreate {
	_c.mutation.SetFirstName(v)
	return _c
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_c *UserCreate) SetNillableFirstName(v *string) *UserCreate {
	if v != nil {
		_c.SetFirstName(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *UserCreate) SetCreatedAt(v time.Time) *UserCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *UserCreate) SetNillableCreatedAt(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetLastSeen sets the "last_seen" field.
func (_c *UserCreate) SetLastSeen(v time.Time) *UserCreate {
	_c.mutation.SetLastSeen(v)
	return _c
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (_c *UserCreate) SetNillableLastSeen(v *time.Time) *UserCreate {
	if v != nil {
		_c.SetLastSeen(*v)
	}
	return _c
}

// SetCurrency sets the "currency" field.
func (_c *UserCreate) SetCurrency(v string) *UserCreate {
	_c.mutation.SetCurrency(v)
	return _c
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_c *UserCreate) SetNillableCurrency(v *string) *UserCreate {
	if v != nil {
		_c.SetCurrency(*v)
	}
	return _c
}

// SetLocale sets the "locale" field.
func (_c *UserCreate) SetLocale(v string) *UserCreate {
	_c.mutation.SetLocale(v)
	return _c
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (_c *UserCreate) SetNillableLocale(v *string) *UserCreate {
	if v != nil {
		_c.SetLocale(*v)
	}
	return _c
}

// SetTimezone sets the "timezone" field.
func (_c *UserCreate) SetTimezone(v string) *UserCreate {
	_c.mutation.SetTimezone(v)
	return _c
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_c *UserCreate) SetNillableTimezone(v *string) *UserCreate {
	if v != nil {
		_c.SetTimezone(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *UserCreate) SetID(v int) *UserCreate {
	_c.mutation.SetID(v)
	return _c
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (_c *UserCreate) AddCategoryIDs(ids ...int) *UserCreate {
	_c.mutation.AddCategoryIDs(ids...)
	return _c
}

// AddCategories adds the "categories" edges to the Category entity.
func (_c *UserCreate) AddCategories(v ...*Category) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddCategoryIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (_c *UserCreate) AddTransactionIDs(ids ...int) *UserCreate {
	_c.mutation.AddTransactionIDs(ids...)
	return _c
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (_c *UserCreate) AddTransactions(v ...*Transaction) *UserCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddTransactionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_c *UserCreate) Mutation() *UserMutation {
	return _c.mutation
}

// Save creates the User in the database.
func (_c *UserCreate) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *UserCreate) SaveX(ctx context.Context) *User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *UserCreate) check() error {
	if _, ok := _c.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`ent: missing required field "User.account_id"`)}
	}
	return nil
}

func (_c *UserCreate) sqlSave(ctx context.Context) (*User, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *UserCreate) createSpec() (*User, *sqlgraph.CreateSpec) {
	var (
		_node = &User{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(user.Table, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.AccountID(); ok {
		_spec.SetField(user.FieldAccountID, field.TypeInt, value)
		_node.AccountID = value
	}
	if value, ok := _c.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.LastSeen(); ok {
		_spec.SetField(user.FieldLastSeen, field.TypeTime, value)
		_node.LastSeen = value
	}
	if value, ok := _c.mutation.Currency(); ok {
		_spec.SetField(user.FieldCurrency, field.TypeString, value)
		_node.Currency = value
	}
	if value, ok := _c.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	if value, ok := _c.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if nodes := _c.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoriesTable,
			Columns: []string{user.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCreateBulk is the builder for creating many User entities in bulk.
type UserCreateBulk struct {
	config
	err      error
	builders []*UserCreate
}

// Save creates the User entities in the database.
func (_c *UserCreateBulk) Save(ctx context.Context) ([]*User, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*User, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *UserCreateBulk) SaveX(ctx context.Context) []*User {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *UserCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *UserCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
