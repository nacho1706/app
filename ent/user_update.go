// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"test-go2/ent/category"
	"test-go2/ent/predicate"
	"test-go2/ent/transaction"
	"test-go2/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetAccountID sets the "account_id" field.
func (_u *UserUpdate) SetAccountID(v int) *UserUpdate {
	_u.mutation.ResetAccountID()
	_u.mutation.SetAccountID(v)
	return _u
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAccountID(v *int) *UserUpdate {
	if v != nil {
		_u.SetAccountID(*v)
	}
	return _u
}

// AddAccountID adds value to the "account_id" field.
func (_u *UserUpdate) AddAccountID(v int) *UserUpdate {
	_u.mutation.AddAccountID(v)
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdate) SetFirstName(v string) *UserUpdate {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdate) SetNillableFirstName(v *string) *UserUpdate {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// ClearFirstName clears the value of the "first_name" field.
func (_u *UserUpdate) ClearFirstName() *UserUpdate {
	_u.mutation.ClearFirstName()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *UserUpdate) SetCreatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *UserUpdate) SetNillableCreatedAt(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *UserUpdate) ClearCreatedAt() *UserUpdate {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetLastSeen sets the "last_seen" field.
func (_u *UserUpdate) SetLastSeen(v time.Time) *UserUpdate {
	_u.mutation.SetLastSeen(v)
	return _u
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLastSeen(v *time.Time) *UserUpdate {
	if v != nil {
		_u.SetLastSeen(*v)
	}
	return _u
}

// ClearLastSeen clears the value of the "last_seen" field.
func (_u *UserUpdate) ClearLastSeen() *UserUpdate {
	_u.mutation.ClearLastSeen()
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *UserUpdate) SetCurrency(v string) *UserUpdate {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *UserUpdate) SetNillableCurrency(v *string) *UserUpdate {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// ClearCurrency clears the value of the "currency" field.
func (_u *UserUpdate) ClearCurrency() *UserUpdate {
	_u.mutation.ClearCurrency()
	return _u
}

// SetLocale sets the "locale" field.
func (_u *UserUpdate) SetLocale(v string) *UserUpdate {
	_u.mutation.SetLocale(v)
	return _u
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (_u *UserUpdate) SetNillableLocale(v *string) *UserUpdate {
	if v != nil {
		_u.SetLocale(*v)
	}
	return _u
}

// ClearLocale clears the value of the "locale" field.
func (_u *UserUpdate) ClearLocale() *UserUpdate {
	_u.mutation.ClearLocale()
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *UserUpdate) SetTimezone(v string) *UserUpdate {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *UserUpdate) SetNillableTimezone(v *string) *UserUpdate {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// ClearTimezone clears the value of the "timezone" field.
func (_u *UserUpdate) ClearTimezone() *UserUpdate {
	_u.mutation.ClearTimezone()
	return _u
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (_u *UserUpdate) AddCategoryIDs(ids ...int) *UserUpdate {
	_u.mutation.AddCategoryIDs(ids...)
	return _u
}

// AddCategories adds the "categories" edges to the Category entity.
func (_u *UserUpdate) AddCategories(v ...*Category) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCategoryIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (_u *UserUpdate) AddTransactionIDs(ids ...int) *UserUpdate {
	_u.mutation.AddTransactionIDs(ids...)
	return _u
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (_u *UserUpdate) AddTransactions(v ...*Transaction) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTransactionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearCategories clears all "categories" edges to the Category entity.
func (_u *UserUpdate) ClearCategories() *UserUpdate {
	_u.mutation.ClearCategories()
	return _u
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (_u *UserUpdate) RemoveCategoryIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveCategoryIDs(ids...)
	return _u
}

// RemoveCategories removes "categories" edges to Category entities.
func (_u *UserUpdate) RemoveCategories(v ...*Category) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCategoryIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (_u *UserUpdate) ClearTransactions() *UserUpdate {
	_u.mutation.ClearTransactions()
	return _u
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (_u *UserUpdate) RemoveTransactionIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveTransactionIDs(ids...)
	return _u
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (_u *UserUpdate) RemoveTransactions(v ...*Transaction) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTransactionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AccountID(); ok {
		_spec.SetField(user.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAccountID(); ok {
		_spec.AddField(user.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if _u.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastSeen(); ok {
		_spec.SetField(user.FieldLastSeen, field.TypeTime, value)
	}
	if _u.mutation.LastSeenCleared() {
		_spec.ClearField(user.FieldLastSeen, field.TypeTime)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(user.FieldCurrency, field.TypeString, value)
	}
	if _u.mutation.CurrencyCleared() {
		_spec.ClearField(user.FieldCurrency, field.TypeString)
	}
	if value, ok := _u.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
	}
	if _u.mutation.LocaleCleared() {
		_spec.ClearField(user.FieldLocale, field.TypeString)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
	}
	if _u.mutation.TimezoneCleared() {
		_spec.ClearField(user.FieldTimezone, field.TypeString)
	}
	if _u.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoriesTable,
			Columns: []string{user.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !_u.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoriesTable,
			Columns: []string{user.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoriesTable,
			Columns: []string{user.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !_u.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetAccountID sets the "account_id" field.
func (_u *UserUpdateOne) SetAccountID(v int) *UserUpdateOne {
	_u.mutation.ResetAccountID()
	_u.mutation.SetAccountID(v)
	return _u
}

// SetNillableAccountID sets the "account_id" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAccountID(v *int) *UserUpdateOne {
	if v != nil {
		_u.SetAccountID(*v)
	}
	return _u
}

// AddAccountID adds value to the "account_id" field.
func (_u *UserUpdateOne) AddAccountID(v int) *UserUpdateOne {
	_u.mutation.AddAccountID(v)
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *UserUpdateOne) SetFirstName(v string) *UserUpdateOne {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableFirstName(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// ClearFirstName clears the value of the "first_name" field.
func (_u *UserUpdateOne) ClearFirstName() *UserUpdateOne {
	_u.mutation.ClearFirstName()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *UserUpdateOne) SetCreatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCreatedAt(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (_u *UserUpdateOne) ClearCreatedAt() *UserUpdateOne {
	_u.mutation.ClearCreatedAt()
	return _u
}

// SetLastSeen sets the "last_seen" field.
func (_u *UserUpdateOne) SetLastSeen(v time.Time) *UserUpdateOne {
	_u.mutation.SetLastSeen(v)
	return _u
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLastSeen(v *time.Time) *UserUpdateOne {
	if v != nil {
		_u.SetLastSeen(*v)
	}
	return _u
}

// ClearLastSeen clears the value of the "last_seen" field.
func (_u *UserUpdateOne) ClearLastSeen() *UserUpdateOne {
	_u.mutation.ClearLastSeen()
	return _u
}

// SetCurrency sets the "currency" field.
func (_u *UserUpdateOne) SetCurrency(v string) *UserUpdateOne {
	_u.mutation.SetCurrency(v)
	return _u
}

// SetNillableCurrency sets the "currency" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableCurrency(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetCurrency(*v)
	}
	return _u
}

// ClearCurrency clears the value of the "currency" field.
func (_u *UserUpdateOne) ClearCurrency() *UserUpdateOne {
	_u.mutation.ClearCurrency()
	return _u
}

// SetLocale sets the "locale" field.
func (_u *UserUpdateOne) SetLocale(v string) *UserUpdateOne {
	_u.mutation.SetLocale(v)
	return _u
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableLocale(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetLocale(*v)
	}
	return _u
}

// ClearLocale clears the value of the "locale" field.
func (_u *UserUpdateOne) ClearLocale() *UserUpdateOne {
	_u.mutation.ClearLocale()
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *UserUpdateOne) SetTimezone(v string) *UserUpdateOne {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableTimezone(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// ClearTimezone clears the value of the "timezone" field.
func (_u *UserUpdateOne) ClearTimezone() *UserUpdateOne {
	_u.mutation.ClearTimezone()
	return _u
}

// AddCategoryIDs adds the "categories" edge to the Category entity by IDs.
func (_u *UserUpdateOne) AddCategoryIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddCategoryIDs(ids...)
	return _u
}

// AddCategories adds the "categories" edges to the Category entity.
func (_u *UserUpdateOne) AddCategories(v ...*Category) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddCategoryIDs(ids...)
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (_u *UserUpdateOne) AddTransactionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddTransactionIDs(ids...)
	return _u
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (_u *UserUpdateOne) AddTransactions(v ...*Transaction) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTransactionIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearCategories clears all "categories" edges to the Category entity.
func (_u *UserUpdateOne) ClearCategories() *UserUpdateOne {
	_u.mutation.ClearCategories()
	return _u
}

// RemoveCategoryIDs removes the "categories" edge to Category entities by IDs.
func (_u *UserUpdateOne) RemoveCategoryIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveCategoryIDs(ids...)
	return _u
}

// RemoveCategories removes "categories" edges to Category entities.
func (_u *UserUpdateOne) RemoveCategories(v ...*Category) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveCategoryIDs(ids...)
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (_u *UserUpdateOne) ClearTransactions() *UserUpdateOne {
	_u.mutation.ClearTransactions()
	return _u
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (_u *UserUpdateOne) RemoveTransactionIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveTransactionIDs(ids...)
	return _u
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (_u *UserUpdateOne) RemoveTransactions(v ...*Transaction) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTransactionIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.AccountID(); ok {
		_spec.SetField(user.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedAccountID(); ok {
		_spec.AddField(user.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if _u.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(user.FieldCreatedAt, field.TypeTime, value)
	}
	if _u.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastSeen(); ok {
		_spec.SetField(user.FieldLastSeen, field.TypeTime, value)
	}
	if _u.mutation.LastSeenCleared() {
		_spec.ClearField(user.FieldLastSeen, field.TypeTime)
	}
	if value, ok := _u.mutation.Currency(); ok {
		_spec.SetField(user.FieldCurrency, field.TypeString, value)
	}
	if _u.mutation.CurrencyCleared() {
		_spec.ClearField(user.FieldCurrency, field.TypeString)
	}
	if value, ok := _u.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
	}
	if _u.mutation.LocaleCleared() {
		_spec.ClearField(user.FieldLocale, field.TypeString)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(user.FieldTimezone, field.TypeString, value)
	}
	if _u.mutation.TimezoneCleared() {
		_spec.ClearField(user.FieldTimezone, field.TypeString)
	}
	if _u.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoriesTable,
			Columns: []string{user.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedCategoriesIDs(); len(nodes) > 0 && !_u.mutation.CategoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoriesTable,
			Columns: []string{user.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.CategoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.CategoriesTable,
			Columns: []string{user.CategoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(category.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !_u.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.TransactionsTable,
			Columns: []string{user.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(transaction.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
